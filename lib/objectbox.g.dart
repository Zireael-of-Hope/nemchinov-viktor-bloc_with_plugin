// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/emoji_back_model.dart';
import 'models/tweet_back_model.dart';
import 'models/user_back_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 193904738859485020),
      name: 'Emoji',
      lastPropertyId: const IdUid(4, 2796487801088387478),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8810014991245785436),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3499221354777943791),
            name: 'symbol',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7828047238866343290),
            name: 'authorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6250568156512954091),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(4, 2796487801088387478),
            name: 'tweetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 744317998750169124),
            relationTarget: 'Tweet')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6802527565334335308),
      name: 'Tweet',
      lastPropertyId: const IdUid(5, 8744211449160744337),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8740205538480224816),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1129079082597681793),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5235892766551452294),
            name: 'timePosted',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2610267662223771433),
            name: 'accessModifierInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8744211449160744337),
            name: 'authorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3192162792295545307),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'emojis', srcEntity: 'Emoji', srcField: 'tweet')
      ]),
  ModelEntity(
      id: const IdUid(3, 8884652474970771443),
      name: 'User',
      lastPropertyId: const IdUid(16, 3434904020167505701),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3932094381253031103),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3678233485209529660),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8537636107573871532),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3576595558940240325),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5337290277749393739),
            name: 'profileName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4354320096075991188),
            name: 'profileDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5942187959866644650),
            name: 'occupation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4238754105526472681),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4193931447688843641),
            name: 'profileAppBarImage',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2321336224221367908),
            name: 'profileImage',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6190695128550058705),
            name: 'genderInt',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1763723321378618358),
            name: 'age',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2965515655045719691),
            name: 'linkToWebsite',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5975045404787140896),
            name: 'birthDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4583189391939660768),
            name: 'joinDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3434904020167505701),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 1997197060615894094),
            name: 'emojis',
            targetId: const IdUid(1, 193904738859485020)),
        ModelRelation(
            id: const IdUid(2, 2632440999920358475),
            name: 'followers',
            targetId: const IdUid(3, 8884652474970771443)),
        ModelRelation(
            id: const IdUid(3, 2110806111043784448),
            name: 'following',
            targetId: const IdUid(3, 8884652474970771443))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'posts', srcEntity: 'Tweet', srcField: '')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8884652474970771443),
      lastIndexId: const IdUid(3, 3192162792295545307),
      lastRelationId: const IdUid(3, 2110806111043784448),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Emoji: EntityDefinition<Emoji>(
        model: _entities[0],
        toOneRelations: (Emoji object) => [object.author, object.tweet],
        toManyRelations: (Emoji object) => {},
        getId: (Emoji object) => object.id,
        setId: (Emoji object, int id) {
          object.id = id;
        },
        objectToFB: (Emoji object, fb.Builder fbb) {
          final symbolOffset = fbb.writeString(object.symbol);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, symbolOffset);
          fbb.addInt64(2, object.author.targetId);
          fbb.addInt64(3, object.tweet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final symbolParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Emoji(id: idParam, symbol: symbolParam);
          object.author.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.author.attach(store);
          object.tweet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.tweet.attach(store);
          return object;
        }),
    Tweet: EntityDefinition<Tweet>(
        model: _entities[1],
        toOneRelations: (Tweet object) => [object.author],
        toManyRelations: (Tweet object) => {
              RelInfo<Emoji>.toOneBacklink(
                      4, object.id, (Emoji srcObject) => srcObject.tweet):
                  object.emojis
            },
        getId: (Tweet object) => object.id,
        setId: (Tweet object, int id) {
          object.id = id;
        },
        objectToFB: (Tweet object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addInt64(2, object.timePosted.millisecondsSinceEpoch);
          fbb.addInt64(3, object.accessModifierInt);
          fbb.addInt64(4, object.author.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final accessModifierIntParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Tweet(
              id: idParam,
              text: textParam,
              accessModifierInt: accessModifierIntParam)
            ..timePosted = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          object.author.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.author.attach(store);
          InternalToManyAccess.setRelInfo<Tweet>(
              object.emojis,
              store,
              RelInfo<Emoji>.toOneBacklink(
                  4, object.id, (Emoji srcObject) => srcObject.tweet));
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<User>.toMany(1, object.id): object.emojis,
              RelInfo<User>.toMany(2, object.id): object.followers,
              RelInfo<User>.toMany(3, object.id): object.following,
              RelInfo<Tweet>.toOneBacklink(
                      5, object.id, (Tweet srcObject) => srcObject.author):
                  object.posts
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final profileNameOffset = object.profileName == null
              ? null
              : fbb.writeString(object.profileName!);
          final profileDescriptionOffset = object.profileDescription == null
              ? null
              : fbb.writeString(object.profileDescription!);
          final occupationOffset = object.occupation == null
              ? null
              : fbb.writeString(object.occupation!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final profileAppBarImageOffset = object.profileAppBarImage == null
              ? null
              : fbb.writeListInt8(object.profileAppBarImage!);
          final profileImageOffset = object.profileImage == null
              ? null
              : fbb.writeListInt8(object.profileImage!);
          final linkToWebsiteOffset = object.linkToWebsite == null
              ? null
              : fbb.writeString(object.linkToWebsite!);
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, profileNameOffset);
          fbb.addOffset(5, profileDescriptionOffset);
          fbb.addOffset(6, occupationOffset);
          fbb.addOffset(7, locationOffset);
          fbb.addOffset(8, profileAppBarImageOffset);
          fbb.addOffset(9, profileImageOffset);
          fbb.addInt64(10, object.genderInt);
          fbb.addInt64(11, object.age);
          fbb.addOffset(12, linkToWebsiteOffset);
          fbb.addInt64(13, object.birthDate?.millisecondsSinceEpoch);
          fbb.addInt64(14, object.joinDate.millisecondsSinceEpoch);
          fbb.addOffset(15, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final birthDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final profileNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final profileDescriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final profileAppBarImageParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20) as Uint8List?;
          final profileImageParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 22) as Uint8List?;
          final genderIntParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final ageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final linkToWebsiteParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final birthDateParam = birthDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(birthDateValue);
          final object = User(
              id: idParam,
              username: usernameParam,
              email: emailParam,
              password: passwordParam,
              profileName: profileNameParam,
              profileDescription: profileDescriptionParam,
              location: locationParam,
              profileAppBarImage: profileAppBarImageParam,
              profileImage: profileImageParam,
              genderInt: genderIntParam,
              age: ageParam,
              linkToWebsite: linkToWebsiteParam,
              birthDate: birthDateParam)
            ..occupation = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..joinDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0))
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 34, '');
          InternalToManyAccess.setRelInfo<User>(
              object.emojis, store, RelInfo<User>.toMany(1, object.id));
          InternalToManyAccess.setRelInfo<User>(
              object.followers, store, RelInfo<User>.toMany(2, object.id));
          InternalToManyAccess.setRelInfo<User>(
              object.following, store, RelInfo<User>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<User>(
              object.posts,
              store,
              RelInfo<Tweet>.toOneBacklink(
                  5, object.id, (Tweet srcObject) => srcObject.author));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Emoji] entity fields to define ObjectBox queries.
class Emoji_ {
  /// see [Emoji.id]
  static final id = QueryIntegerProperty<Emoji>(_entities[0].properties[0]);

  /// see [Emoji.symbol]
  static final symbol = QueryStringProperty<Emoji>(_entities[0].properties[1]);

  /// see [Emoji.author]
  static final author =
      QueryRelationToOne<Emoji, User>(_entities[0].properties[2]);

  /// see [Emoji.tweet]
  static final tweet =
      QueryRelationToOne<Emoji, Tweet>(_entities[0].properties[3]);
}

/// [Tweet] entity fields to define ObjectBox queries.
class Tweet_ {
  /// see [Tweet.id]
  static final id = QueryIntegerProperty<Tweet>(_entities[1].properties[0]);

  /// see [Tweet.text]
  static final text = QueryStringProperty<Tweet>(_entities[1].properties[1]);

  /// see [Tweet.timePosted]
  static final timePosted =
      QueryIntegerProperty<Tweet>(_entities[1].properties[2]);

  /// see [Tweet.accessModifierInt]
  static final accessModifierInt =
      QueryIntegerProperty<Tweet>(_entities[1].properties[3]);

  /// see [Tweet.author]
  static final author =
      QueryRelationToOne<Tweet, User>(_entities[1].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[2].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[2].properties[2]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[2].properties[3]);

  /// see [User.profileName]
  static final profileName =
      QueryStringProperty<User>(_entities[2].properties[4]);

  /// see [User.profileDescription]
  static final profileDescription =
      QueryStringProperty<User>(_entities[2].properties[5]);

  /// see [User.occupation]
  static final occupation =
      QueryStringProperty<User>(_entities[2].properties[6]);

  /// see [User.location]
  static final location = QueryStringProperty<User>(_entities[2].properties[7]);

  /// see [User.profileAppBarImage]
  static final profileAppBarImage =
      QueryByteVectorProperty<User>(_entities[2].properties[8]);

  /// see [User.profileImage]
  static final profileImage =
      QueryByteVectorProperty<User>(_entities[2].properties[9]);

  /// see [User.genderInt]
  static final genderInt =
      QueryIntegerProperty<User>(_entities[2].properties[10]);

  /// see [User.age]
  static final age = QueryIntegerProperty<User>(_entities[2].properties[11]);

  /// see [User.linkToWebsite]
  static final linkToWebsite =
      QueryStringProperty<User>(_entities[2].properties[12]);

  /// see [User.birthDate]
  static final birthDate =
      QueryIntegerProperty<User>(_entities[2].properties[13]);

  /// see [User.joinDate]
  static final joinDate =
      QueryIntegerProperty<User>(_entities[2].properties[14]);

  /// see [User.displayName]
  static final displayName =
      QueryStringProperty<User>(_entities[2].properties[15]);

  /// see [User.emojis]
  static final emojis =
      QueryRelationToMany<User, Emoji>(_entities[2].relations[0]);

  /// see [User.followers]
  static final followers =
      QueryRelationToMany<User, User>(_entities[2].relations[1]);

  /// see [User.following]
  static final following =
      QueryRelationToMany<User, User>(_entities[2].relations[2]);
}
